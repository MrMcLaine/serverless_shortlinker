org: mrmclaine
app: shortlinker
service: shortlinker
frameworkVersion: '3'

custom:
  tableName: 'users-table-${sls:stage}'
  linksTableName: 'links-table-${sls:stage}'

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - secretsmanager:GetSecretValue
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [ LinksTable, Arn ]
            - Fn::Sub: "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${self:provider.stage}-jwt-secret-*"

  environment:
    USERS_TABLE: ${self:custom.tableName}
    LINKS_TABLE: ${self:custom.linksTableName}

functions:
  api:
    handler: dist/index.handler
    events:
      - httpApi: '*'
  registerUser:
    handler: src/lambdas/register.register
    events:
      - http:
          path: register
          method: post
          cors: true
  loginUser:
    handler: src/lambdas/login.login
    events:
      - http:
          path: login
          method: post
          cors: true
  createLink:
    handler: src/lambdas/createLink.createLink
    events:
      - http:
          path: link
          method: post
          cors: true
          authorizer:
            type: TOKEN
            name: jwtAuthorizer
            arn: arn:aws:lambda:region:accountId:function:jwtAuthorizer
  getLinkFromShortUrl:
    handler: src/lambdas/getLinkFromShortUrl.getLinkFromShortUrl
    events:
      - http:
          path: link/{linkId}
          method: get
          cors: true

  deactivateLink:
    handler: src/lambdas/deactivateLink.deactivateLink
    events:
      - http:
          path: link/{linkId}/deactivate
          method: post
          cors: true
          authorizer:
            type: TOKEN
            name: jwtAuthorizer
            arn: arn:aws:lambda:region:accountId:function:jwtAuthorizer

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: "ALL"

    LinksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.linksTableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: linkId
            AttributeType: S
        KeySchema:
          - AttributeName: linkId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expiredAt
          Enabled: true
    JwtSecret:
      Type: "AWS::SecretsManager::Secret"
      Properties:
        Name: ${self:provider.stage}-jwt-secret
        Description: "JWT secret for the application"
        GenerateSecretString:
          SecretStringTemplate: '{"jwt":"secret"}'
          GenerateStringKey: "jwt"